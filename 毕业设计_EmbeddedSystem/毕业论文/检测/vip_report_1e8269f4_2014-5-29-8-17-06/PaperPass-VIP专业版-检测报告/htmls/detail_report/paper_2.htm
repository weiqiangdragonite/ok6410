<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>

<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_10.htm">尾页</a>
页码：2/10页
]
</div>

<br><div style="margin-left:25px">

<img src="../../images/guanwang.gif"></div><br><br>
<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">35</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/88.htm' target='right' class='orange' >从图2-2可看出，ARM处理器在不同的工作模式下所使用的寄存器是不同的。</a><span class='green'>通用寄存器R0-R7在所有模式下是共用的；</span><a href='../sentence_detail/90.htm' target='right' class='red' >快速中断模式下有自己专用的寄存器R8-R12；</a><a href='../sentence_detail/91.htm' target='right' class='orange' >系统模式和用户模式下使用相同的堆栈指针R13（Stack Pointer，SP）和程序链接寄存器R14（Link Register，LR），其它模式都有自己特定的寄存器。</a><a href='../sentence_detail/92.htm' target='right' class='orange' >最后一个通用寄存器是程序计数器R15，总共有31个通用寄存器。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">36</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/93.htm' target='right' class='red' >状态寄存器有1个当前程序状态寄存器 CPSR，5个备份程序状态寄存器 SPSR，</a><a href='../sentence_detail/94.htm' target='right' class='orange' >分别用于5种工作模式，用户模式和系统模式没有备份程序状态寄存器。</a><a href='../sentence_detail/95.htm' target='right' class='red' >程序状态寄存器的格式如下图所示。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">37</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/96.htm' target='right' class='red' >图2-3 程序状态寄存器格式</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">38</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/97.htm' target='right' class='orange' >M4-M0为模式选择位，决定处理器工作于哪种模式。</a><a href='../sentence_detail/98.htm' target='right' class='orange' >T位为ARM与Thumb指令切换，T为1时执行Thumb指令，为0时执行ARM指令。</a><a href='../sentence_detail/99.htm' target='right' class='orange' >F位为快速中断控制位，F为1时禁止FIQ中断，为0时允许快速中断。</a><a href='../sentence_detail/100.htm' target='right' class='orange' >I位为中断控制位，I为1时允许外部IRQ中断，为0时禁止IRQ中断。</a><span class='green'>第27位到31位为条件码标志，详细可参考ARM手册。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">39</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由于本论文所写的嵌入式操作系统是工作在ARM状态下的，因此只简单介绍ARM状态下的寄存器情况，对于Thumb及Thumb-2状态下的寄存器情况并没有做相关的介绍。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">40</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.1.4 ARM处理器的异常处理</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">41</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/104.htm' target='right' class='red' > ARM处理器拥有7种不同类型的异常，分别是复位、未定义指令、软件中断、指令预取中止、数据访问中止、外部中断请求、快速中断请求，</a><a href='../sentence_detail/105.htm' target='right' class='orange' >它们的优先级及对应的异常向量地址如下图所示。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">42</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/106.htm' target='right' class='orange' >图2-4 ARM异常类型、优先级及向量地址</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">43</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>7种异常可分为6级，其中复位优先级最高，未定义指令和软件中断最低，而且这两个异常是互斥的，不可能同时发生，所以它们的优先级是相同的。</span><span class='green'>当复位的引脚有效时，系统便无条件的进入管理模式，并把PC指向0x00000000处开始执行指令。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">44</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/109.htm' target='right' class='red' >当ARM处理器发生异常后，除了复位异常立即中止当前运行指令外，其余的异常处理器都是尽量完成当前指令后，再去处理异常。</a><span class='green'>ARM处理器异常的响应过程如下：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">45</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/111.htm' target='right' class='orange' >将当前工作模式下的CPSR的值保存到执行异常工作模式下的SPSR中，以便对当前处理器的状态、中断屏蔽和各标志位的保护。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">46</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/112.htm' target='right' class='orange' >设置当前状态寄存器为相应的异常工作模式，而且禁止IRQ外部中断，如果进入的是复位模式或快速中断模式，还要禁止FIQ快速中断。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">47</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/113.htm' target='right' class='red' >将引起异常指令的下一条地址保存到异常工作模式下的R14（LR）中，这样能使异常处理程序执行完后能返回原来的程序处继续向下执行指令。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">48</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/114.htm' target='right' class='orange' >给程序计数器PC强行赋值，跳到对应的异常向量地址处执行相应的处理程序。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">49</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/115.htm' target='right' class='orange' >每种异常模式下都有自己对应的SP和LR两个寄存器，分别用来存放堆栈指针和断点地址。</a><span class='green'>以上的4步工作都是由ARM处理器的硬件自动完成的，我们只能做的是设计异常处理程序，并从异常处理程序中返回到原来的程序处。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">50</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/117.htm' target='right' class='orange' >由于 ARM处理器采用了多级流水线的技术，因此在实际编程时，第3步将引起异常指令的下一条地址保存到异常工作模式下的 R14中，</a><span class='green'>该地址往往不是正确的返回地址。</span><a href='../sentence_detail/119.htm' target='right' class='orange' >因此我们通常在进入异常处理程序后，修改LR的值，以保证返回时是正确的地址。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">51</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/120.htm' target='right' class='orange' >ARM处理器从异常程序返回到原来的程序处继续向下执行的过程如下：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">52</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/121.htm' target='right' class='red' >将异常模式下的SPSR值复制到CPSR中，使得原来的CPSR的状态从相应的SPSR中恢复，回到被中断前的工作状态。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">53</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/122.htm' target='right' class='orange' >将LR的值装入到程序计数器PC中，使得程序能返回原来的程序处，这里LR的值为返回地址值。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">54</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/123.htm' target='right' class='orange' >清除CPSR中的中断屏蔽位，打开IRQ外部中断和FIQ快速中断。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">55</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>这里的异常中断的返回顺序不能混乱，只能是先恢复CPSR的值，再从LR中恢复断点地址，返回原来的程序。</span><a href='../sentence_detail/125.htm' target='right' class='orange' >如果顺序搞乱了，系统就会发生错误。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">56</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2 Ok6410开发板的介绍</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">57</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/127.htm' target='right' class='orange' >本论文所写的嵌入式操作系统是在飞凌公司的OK6410开发板下所完成的，OK6410开发板是基于三星公司的ARM11处理器S3C6410。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">58</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.1 S3C6410芯片简介</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">59</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由 S3 C6410芯片手册介绍[3][4]可知， S3 C6410是一个16/32位的 RISC处理器，</span><span class='green'>用来提供一种有经济效益的、低功耗的、高性能，能适用于移动电话和一般应用的处理器解决方案。</span><a href='../sentence_detail/131.htm' target='right' class='red' >S3C6410采用61/32位的内部总线架构，为2.5G和3G通信服务提供了优化的H/W性能。</a><a href='../sentence_detail/132.htm' target='right' class='red' >该64/32位的内部总线架构是由AXI、AHB和APB总线组成的。</a><a href='../sentence_detail/133.htm' target='right' class='orange' >它还有很多强大的硬件加速器，比如2D图像处理、图形显示和缩放处理、运动视频处理、音频处理等。</a><span class='green'>一个集成的多格式编解码器（Multi Format Codec，MFC）和MPEG4/H.263/H.264编解码器和VC1解码器。</span><a href='../sentence_detail/135.htm' target='right' class='red' >这种H/W编解码器能支持实时视频会议和电视输出的NTSC和PAL两种模式。</a><a href='../sentence_detail/136.htm' target='right' class='orange' >此外，该处理器含有一个3D加速器，支持OpenGL ES 1.1/2.0的图形渲染。</a><a href='../sentence_detail/137.htm' target='right' class='red' >这种3D引擎还有两个可编程着色器：</a><a href='../sentence_detail/138.htm' target='right' class='red' >一个像素着色器和一个顶点着色器。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">60</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/139.htm' target='right' class='red' >S3C6410具有一个优化的接口连接到外部存储器。</a><span class='green'>这种优化的接口，外部存储器是能在高速通信服务上维持高内存带宽。</span><a href='../sentence_detail/141.htm' target='right' class='red' >内存系统具有双重外部存储器端口，DRAM和Flash/ROM。</a><span class='green'>在DRAM端口可以配置为支持mobile DDR、DDR、mobile SDRAM和SDRAM内存。</span><span class='green'>在Flash/ROM端口可以支持NOR Flash、NAND Flash、OneNand、CF和ROM等类型的外部存储器。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">61</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/144.htm' target='right' class='red' >为了降低系统的总体成本和提高整体功能， S3 C6410包含了许多硬件外设，</a><a href='../sentence_detail/145.htm' target='right' class='red' >例如相机接口、 TFT24位真彩色 LCD控制器、系统管理器（电源管理等）、4个的 UART、32个</a><a href='../sentence_detail/146.htm' target='right' class='red' > DMA、5个32位定时器（其中有2个是 PWM输出）、通用 I/ O接口（ GPIO），</a><a href='../sentence_detail/147.htm' target='right' class='red' > I2 S总线接口、 I2 C总线接口、 USB主设备、 USB OTG设备高速传输（</a><a href='../sentence_detail/148.htm' target='right' class='red' >480 Mbps）、3通道 SD/ MMC主机控制器和 PLL时钟发生器。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">62</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>S3C6410的ARM子系统是基于ARM1176JZF-S内核。</span><a href='../sentence_detail/150.htm' target='right' class='red' >它包括独立的16KB指令和16KB的数据缓存、16KB指令和16KB的数据TCM。</a><a href='../sentence_detail/151.htm' target='right' class='red' >它还包括一个完整的MMU来处理虚拟内存管理。</a><a href='../sentence_detail/152.htm' target='right' class='orange' >ARM1176JZF-S是一款单芯片的微控制器，其中包括JAVA加速器。</a><span class='green'>ARM1176JZF-S包括一个专用的矢量浮点协处理器，允许高效的实现各种加密方案和3D图形应用程序。</span><span class='green'>S3C6410采用实际标准的AMBA总线架构。</span><a href='../sentence_detail/155.htm' target='right' class='orange' >这种强大的、行业标准的特点让S3C6410能够支持许多工业标准的操作系统。</a><span class='green'>下图2-5就是S3C6410的芯片架构图。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">63</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2-5 S3C6410芯片架构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">64</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.2 Ok6410开发板简介</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">65</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/159.htm' target='right' class='red' >OK6410开发板采用S3C6410芯片，拥有强大的内部资源和视频处理能力，可以稳定运行在667MHz主频上，支持Mobile DDR和多种NAND Flash。</a><a href='../sentence_detail/160.htm' target='right' class='red' >OK6410开发板上集成了多种高端接口，如液晶屏、以太网、复合视频信号、摄像头、SD卡、USB等，并配备红外接收头、温度传感器等。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">66</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>该开发板拥有256MB Mobile DDR内存和MLC 4GB NAND Flash外存，主频为533MHz/667MHz。</span><a href='../sentence_detail/162.htm' target='right' class='red' >总共有4个串口，包括1个五线RS-232电平串口（DB9母座）和3个三线TTL电平串口。</a><span class='green'>1个RTC实时时钟，4个LED，6个按键，1个蜂鸣器。</span><span class='green'>还有其它的硬件资源，详细可参考开发板硬件手册[5]，下图2-6就是OK6410开发板的实物图。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">67</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2-6 OK6410开发板</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">68</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.3 本章小结</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">69</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本章主要简单介绍了ARM的体系结构，比如ARM的工作状态、工作模式、寄存器和异常处理。</span><span class='green'>然后简单介绍了所使用的OK6410的开发板的简单情况，包括S3C6410的芯片，最后详细介绍了如何在Linux下搭建基本的交叉开发环境。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">70</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>系统分析与设计</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">71</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.1 系统的设计目标</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">72</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/171.htm' target='right' class='orange' >本论文所写的嵌入式操作系统是基于 ARM开发平台，具备基本的多任务调度，也就是说应用开发者能创建多个任务来进行工作，</a><span class='green'>每个任务间通过本系统的调度算法来进行分配任务的运行，同时本系统具有简单的内存管理功能，</span><a href='../sentence_detail/173.htm' target='right' class='orange' >开发者可以在任务里随时进行申请内存和释放内存的操作。</a><a href='../sentence_detail/174.htm' target='right' class='orange' >经过分析，本嵌入式操作系统具有以下的基本功能：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">73</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>任务的基本操作功能。</span><span class='green'>这里包括任务的创建、任务的挂起和恢复、任务的删除等，开发者可以调用相应的函数接口来进行任务的操作。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_10.htm">尾页</a>
页码：2/10页
]
</div>

</div>

<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2013 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
